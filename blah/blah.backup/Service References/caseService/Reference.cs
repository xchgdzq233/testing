//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace blah.caseService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
        "ataModel")]
    [System.SerializableAttribute()]
    public partial class StepFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="caseService.ICaseService")]
    public interface ICaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/initializeCase", ReplyAction="http://tempuri.org/ICaseService/initializeCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/initializeCaseStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool initializeCase(string CaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/initializeCase", ReplyAction="http://tempuri.org/ICaseService/initializeCaseResponse")]
        System.Threading.Tasks.Task<bool> initializeCaseAsync(string CaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/GetConfigurationProperty", ReplyAction="http://tempuri.org/ICaseService/GetConfigurationPropertyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/GetConfigurationPropertyStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        string GetConfigurationProperty(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/GetConfigurationProperty", ReplyAction="http://tempuri.org/ICaseService/GetConfigurationPropertyResponse")]
        System.Threading.Tasks.Task<string> GetConfigurationPropertyAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/IsOPMApprovalNeeded", ReplyAction="http://tempuri.org/ICaseService/IsOPMApprovalNeededResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/IsOPMApprovalNeededStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool IsOPMApprovalNeeded(string caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/IsOPMApprovalNeeded", ReplyAction="http://tempuri.org/ICaseService/IsOPMApprovalNeededResponse")]
        System.Threading.Tasks.Task<bool> IsOPMApprovalNeededAsync(string caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/IsOTGApprovalNeeded", ReplyAction="http://tempuri.org/ICaseService/IsOTGApprovalNeededResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/IsOTGApprovalNeededStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool IsOTGApprovalNeeded(string caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/IsOTGApprovalNeeded", ReplyAction="http://tempuri.org/ICaseService/IsOTGApprovalNeededResponse")]
        System.Threading.Tasks.Task<bool> IsOTGApprovalNeededAsync(string caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/CreateCommentPeriod", ReplyAction="http://tempuri.org/ICaseService/CreateCommentPeriodResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/CreateCommentPeriodStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool CreateCommentPeriod(string caseid, System.DateTime enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/CreateCommentPeriod", ReplyAction="http://tempuri.org/ICaseService/CreateCommentPeriodResponse")]
        System.Threading.Tasks.Task<bool> CreateCommentPeriodAsync(string caseid, System.DateTime enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/EndCommentPeriod", ReplyAction="http://tempuri.org/ICaseService/EndCommentPeriodResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/EndCommentPeriodStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool EndCommentPeriod(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/EndCommentPeriod", ReplyAction="http://tempuri.org/ICaseService/EndCommentPeriodResponse")]
        System.Threading.Tasks.Task<bool> EndCommentPeriodAsync(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/CreateAggregateCommentDocument", ReplyAction="http://tempuri.org/ICaseService/CreateAggregateCommentDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/CreateAggregateCommentDocumentStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool CreateAggregateCommentDocument(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/CreateAggregateCommentDocument", ReplyAction="http://tempuri.org/ICaseService/CreateAggregateCommentDocumentResponse")]
        System.Threading.Tasks.Task<bool> CreateAggregateCommentDocumentAsync(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/PublishComment", ReplyAction="http://tempuri.org/ICaseService/PublishCommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/PublishCommentStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool PublishComment(string caseid, int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/PublishComment", ReplyAction="http://tempuri.org/ICaseService/PublishCommentResponse")]
        System.Threading.Tasks.Task<bool> PublishCommentAsync(string caseid, int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SendEmailToSubscribers", ReplyAction="http://tempuri.org/ICaseService/SendEmailToSubscribersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/SendEmailToSubscribersStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool SendEmailToSubscribers(string CaseId, string EventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SendEmailToSubscribers", ReplyAction="http://tempuri.org/ICaseService/SendEmailToSubscribersResponse")]
        System.Threading.Tasks.Task<bool> SendEmailToSubscribersAsync(string CaseId, string EventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SendEmailInternal", ReplyAction="http://tempuri.org/ICaseService/SendEmailInternalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/SendEmailInternalStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool SendEmailInternal(string CaseId, string EventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SendEmailInternal", ReplyAction="http://tempuri.org/ICaseService/SendEmailInternalResponse")]
        System.Threading.Tasks.Task<bool> SendEmailInternalAsync(string CaseId, string EventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UpdateSecurityForAgency", ReplyAction="http://tempuri.org/ICaseService/UpdateSecurityForAgencyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/UpdateSecurityForAgencyStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool UpdateSecurityForAgency(string CaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UpdateSecurityForAgency", ReplyAction="http://tempuri.org/ICaseService/UpdateSecurityForAgencyResponse")]
        System.Threading.Tasks.Task<bool> UpdateSecurityForAgencyAsync(string CaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UpdateSecurityForEntity", ReplyAction="http://tempuri.org/ICaseService/UpdateSecurityForEntityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/UpdateSecurityForEntityStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool UpdateSecurityForEntity(string CaseID, string EntityAcronym);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UpdateSecurityForEntity", ReplyAction="http://tempuri.org/ICaseService/UpdateSecurityForEntityResponse")]
        System.Threading.Tasks.Task<bool> UpdateSecurityForEntityAsync(string CaseID, string EntityAcronym);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SetDocumentSecurity", ReplyAction="http://tempuri.org/ICaseService/SetDocumentSecurityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/SetDocumentSecurityStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool SetDocumentSecurity(string agencyDisplayName, string[] documentIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SetDocumentSecurity", ReplyAction="http://tempuri.org/ICaseService/SetDocumentSecurityResponse")]
        System.Threading.Tasks.Task<bool> SetDocumentSecurityAsync(string agencyDisplayName, string[] documentIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UpdateRegulationProgressStatus", ReplyAction="http://tempuri.org/ICaseService/UpdateRegulationProgressStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/UpdateRegulationProgressStatusStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool UpdateRegulationProgressStatus(string CaseId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UpdateRegulationProgressStatus", ReplyAction="http://tempuri.org/ICaseService/UpdateRegulationProgressStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateRegulationProgressStatusAsync(string CaseId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/CreateRMR", ReplyAction="http://tempuri.org/ICaseService/CreateRMRResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/CreateRMRStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool CreateRMR(string CaseID, string RMRDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/CreateRMR", ReplyAction="http://tempuri.org/ICaseService/CreateRMRResponse")]
        System.Threading.Tasks.Task<bool> CreateRMRAsync(string CaseID, string RMRDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/DoPostActionWork", ReplyAction="http://tempuri.org/ICaseService/DoPostActionWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(blah.caseService.StepFault), Action="http://tempuri.org/ICaseService/DoPostActionWorkStepFaultFault", Name="StepFault", Namespace="http://schemas.datacontract.org/2004/07/Com.Fairfax.Services.CaseService.ServiceD" +
            "ataModel")]
        bool DoPostActionWork(string CaseID, string StepName, string WorkClassName, string ActionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/DoPostActionWork", ReplyAction="http://tempuri.org/ICaseService/DoPostActionWorkResponse")]
        System.Threading.Tasks.Task<bool> DoPostActionWorkAsync(string CaseID, string StepName, string WorkClassName, string ActionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/createTemplates", ReplyAction="http://tempuri.org/ICaseService/createTemplatesResponse")]
        bool createTemplates(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/createTemplates", ReplyAction="http://tempuri.org/ICaseService/createTemplatesResponse")]
        System.Threading.Tasks.Task<bool> createTemplatesAsync(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SetSubjectMatterAndSections", ReplyAction="http://tempuri.org/ICaseService/SetSubjectMatterAndSectionsResponse")]
        bool SetSubjectMatterAndSections(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/SetSubjectMatterAndSections", ReplyAction="http://tempuri.org/ICaseService/SetSubjectMatterAndSectionsResponse")]
        System.Threading.Tasks.Task<bool> SetSubjectMatterAndSectionsAsync(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/exceptionTest", ReplyAction="http://tempuri.org/ICaseService/exceptionTestResponse")]
        void exceptionTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/exceptionTest", ReplyAction="http://tempuri.org/ICaseService/exceptionTestResponse")]
        System.Threading.Tasks.Task exceptionTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/AddTestDocumentToCase", ReplyAction="http://tempuri.org/ICaseService/AddTestDocumentToCaseResponse")]
        void AddTestDocumentToCase(string trackingNumer, string documentClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/AddTestDocumentToCase", ReplyAction="http://tempuri.org/ICaseService/AddTestDocumentToCaseResponse")]
        System.Threading.Tasks.Task AddTestDocumentToCaseAsync(string trackingNumer, string documentClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UnlockCommentPeriodAutomatic", ReplyAction="http://tempuri.org/ICaseService/UnlockCommentPeriodAutomaticResponse")]
        bool UnlockCommentPeriodAutomatic(string wobnumber, string caseid, System.DateTime commentPeriodEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/UnlockCommentPeriodAutomatic", ReplyAction="http://tempuri.org/ICaseService/UnlockCommentPeriodAutomaticResponse")]
        System.Threading.Tasks.Task<bool> UnlockCommentPeriodAutomaticAsync(string wobnumber, string caseid, System.DateTime commentPeriodEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/DoPostActionThingsForSotsPub", ReplyAction="http://tempuri.org/ICaseService/DoPostActionThingsForSotsPubResponse")]
        void DoPostActionThingsForSotsPub(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/DoPostActionThingsForSotsPub", ReplyAction="http://tempuri.org/ICaseService/DoPostActionThingsForSotsPubResponse")]
        System.Threading.Tasks.Task DoPostActionThingsForSotsPubAsync(string caseid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/AddPostActionSkip", ReplyAction="http://tempuri.org/ICaseService/AddPostActionSkipResponse")]
        string AddPostActionSkip(string caseid, string trackingNumber, string action, string step, string workclass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/AddPostActionSkip", ReplyAction="http://tempuri.org/ICaseService/AddPostActionSkipResponse")]
        System.Threading.Tasks.Task<string> AddPostActionSkipAsync(string caseid, string trackingNumber, string action, string step, string workclass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/DeletePostActionSkipFile", ReplyAction="http://tempuri.org/ICaseService/DeletePostActionSkipFileResponse")]
        string DeletePostActionSkipFile(string caseid, string trackingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/DeletePostActionSkipFile", ReplyAction="http://tempuri.org/ICaseService/DeletePostActionSkipFileResponse")]
        System.Threading.Tasks.Task<string> DeletePostActionSkipFileAsync(string caseid, string trackingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/GetSkipsFile", ReplyAction="http://tempuri.org/ICaseService/GetSkipsFileResponse")]
        byte[] GetSkipsFile(string caseid, string trackingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICaseService/GetSkipsFile", ReplyAction="http://tempuri.org/ICaseService/GetSkipsFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetSkipsFileAsync(string caseid, string trackingNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICaseServiceChannel : blah.caseService.ICaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CaseServiceClient : System.ServiceModel.ClientBase<blah.caseService.ICaseService>, blah.caseService.ICaseService {
        
        public CaseServiceClient() {
        }
        
        public CaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool initializeCase(string CaseID) {
            return base.Channel.initializeCase(CaseID);
        }
        
        public System.Threading.Tasks.Task<bool> initializeCaseAsync(string CaseID) {
            return base.Channel.initializeCaseAsync(CaseID);
        }
        
        public string GetConfigurationProperty(string key) {
            return base.Channel.GetConfigurationProperty(key);
        }
        
        public System.Threading.Tasks.Task<string> GetConfigurationPropertyAsync(string key) {
            return base.Channel.GetConfigurationPropertyAsync(key);
        }
        
        public bool IsOPMApprovalNeeded(string caseId) {
            return base.Channel.IsOPMApprovalNeeded(caseId);
        }
        
        public System.Threading.Tasks.Task<bool> IsOPMApprovalNeededAsync(string caseId) {
            return base.Channel.IsOPMApprovalNeededAsync(caseId);
        }
        
        public bool IsOTGApprovalNeeded(string caseId) {
            return base.Channel.IsOTGApprovalNeeded(caseId);
        }
        
        public System.Threading.Tasks.Task<bool> IsOTGApprovalNeededAsync(string caseId) {
            return base.Channel.IsOTGApprovalNeededAsync(caseId);
        }
        
        public bool CreateCommentPeriod(string caseid, System.DateTime enddate) {
            return base.Channel.CreateCommentPeriod(caseid, enddate);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCommentPeriodAsync(string caseid, System.DateTime enddate) {
            return base.Channel.CreateCommentPeriodAsync(caseid, enddate);
        }
        
        public bool EndCommentPeriod(string caseid) {
            return base.Channel.EndCommentPeriod(caseid);
        }
        
        public System.Threading.Tasks.Task<bool> EndCommentPeriodAsync(string caseid) {
            return base.Channel.EndCommentPeriodAsync(caseid);
        }
        
        public bool CreateAggregateCommentDocument(string caseid) {
            return base.Channel.CreateAggregateCommentDocument(caseid);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAggregateCommentDocumentAsync(string caseid) {
            return base.Channel.CreateAggregateCommentDocumentAsync(caseid);
        }
        
        public bool PublishComment(string caseid, int commentId) {
            return base.Channel.PublishComment(caseid, commentId);
        }
        
        public System.Threading.Tasks.Task<bool> PublishCommentAsync(string caseid, int commentId) {
            return base.Channel.PublishCommentAsync(caseid, commentId);
        }
        
        public bool SendEmailToSubscribers(string CaseId, string EventName) {
            return base.Channel.SendEmailToSubscribers(CaseId, EventName);
        }
        
        public System.Threading.Tasks.Task<bool> SendEmailToSubscribersAsync(string CaseId, string EventName) {
            return base.Channel.SendEmailToSubscribersAsync(CaseId, EventName);
        }
        
        public bool SendEmailInternal(string CaseId, string EventName) {
            return base.Channel.SendEmailInternal(CaseId, EventName);
        }
        
        public System.Threading.Tasks.Task<bool> SendEmailInternalAsync(string CaseId, string EventName) {
            return base.Channel.SendEmailInternalAsync(CaseId, EventName);
        }
        
        public bool UpdateSecurityForAgency(string CaseID) {
            return base.Channel.UpdateSecurityForAgency(CaseID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSecurityForAgencyAsync(string CaseID) {
            return base.Channel.UpdateSecurityForAgencyAsync(CaseID);
        }
        
        public bool UpdateSecurityForEntity(string CaseID, string EntityAcronym) {
            return base.Channel.UpdateSecurityForEntity(CaseID, EntityAcronym);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSecurityForEntityAsync(string CaseID, string EntityAcronym) {
            return base.Channel.UpdateSecurityForEntityAsync(CaseID, EntityAcronym);
        }
        
        public bool SetDocumentSecurity(string agencyDisplayName, string[] documentIDs) {
            return base.Channel.SetDocumentSecurity(agencyDisplayName, documentIDs);
        }
        
        public System.Threading.Tasks.Task<bool> SetDocumentSecurityAsync(string agencyDisplayName, string[] documentIDs) {
            return base.Channel.SetDocumentSecurityAsync(agencyDisplayName, documentIDs);
        }
        
        public bool UpdateRegulationProgressStatus(string CaseId, string status) {
            return base.Channel.UpdateRegulationProgressStatus(CaseId, status);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRegulationProgressStatusAsync(string CaseId, string status) {
            return base.Channel.UpdateRegulationProgressStatusAsync(CaseId, status);
        }
        
        public bool CreateRMR(string CaseID, string RMRDescription) {
            return base.Channel.CreateRMR(CaseID, RMRDescription);
        }
        
        public System.Threading.Tasks.Task<bool> CreateRMRAsync(string CaseID, string RMRDescription) {
            return base.Channel.CreateRMRAsync(CaseID, RMRDescription);
        }
        
        public bool DoPostActionWork(string CaseID, string StepName, string WorkClassName, string ActionName) {
            return base.Channel.DoPostActionWork(CaseID, StepName, WorkClassName, ActionName);
        }
        
        public System.Threading.Tasks.Task<bool> DoPostActionWorkAsync(string CaseID, string StepName, string WorkClassName, string ActionName) {
            return base.Channel.DoPostActionWorkAsync(CaseID, StepName, WorkClassName, ActionName);
        }
        
        public bool createTemplates(string caseid) {
            return base.Channel.createTemplates(caseid);
        }
        
        public System.Threading.Tasks.Task<bool> createTemplatesAsync(string caseid) {
            return base.Channel.createTemplatesAsync(caseid);
        }
        
        public bool SetSubjectMatterAndSections(string caseid) {
            return base.Channel.SetSubjectMatterAndSections(caseid);
        }
        
        public System.Threading.Tasks.Task<bool> SetSubjectMatterAndSectionsAsync(string caseid) {
            return base.Channel.SetSubjectMatterAndSectionsAsync(caseid);
        }
        
        public void exceptionTest() {
            base.Channel.exceptionTest();
        }
        
        public System.Threading.Tasks.Task exceptionTestAsync() {
            return base.Channel.exceptionTestAsync();
        }
        
        public void AddTestDocumentToCase(string trackingNumer, string documentClass) {
            base.Channel.AddTestDocumentToCase(trackingNumer, documentClass);
        }
        
        public System.Threading.Tasks.Task AddTestDocumentToCaseAsync(string trackingNumer, string documentClass) {
            return base.Channel.AddTestDocumentToCaseAsync(trackingNumer, documentClass);
        }
        
        public bool UnlockCommentPeriodAutomatic(string wobnumber, string caseid, System.DateTime commentPeriodEndDate) {
            return base.Channel.UnlockCommentPeriodAutomatic(wobnumber, caseid, commentPeriodEndDate);
        }
        
        public System.Threading.Tasks.Task<bool> UnlockCommentPeriodAutomaticAsync(string wobnumber, string caseid, System.DateTime commentPeriodEndDate) {
            return base.Channel.UnlockCommentPeriodAutomaticAsync(wobnumber, caseid, commentPeriodEndDate);
        }
        
        public void DoPostActionThingsForSotsPub(string caseid) {
            base.Channel.DoPostActionThingsForSotsPub(caseid);
        }
        
        public System.Threading.Tasks.Task DoPostActionThingsForSotsPubAsync(string caseid) {
            return base.Channel.DoPostActionThingsForSotsPubAsync(caseid);
        }
        
        public string AddPostActionSkip(string caseid, string trackingNumber, string action, string step, string workclass) {
            return base.Channel.AddPostActionSkip(caseid, trackingNumber, action, step, workclass);
        }
        
        public System.Threading.Tasks.Task<string> AddPostActionSkipAsync(string caseid, string trackingNumber, string action, string step, string workclass) {
            return base.Channel.AddPostActionSkipAsync(caseid, trackingNumber, action, step, workclass);
        }
        
        public string DeletePostActionSkipFile(string caseid, string trackingNumber) {
            return base.Channel.DeletePostActionSkipFile(caseid, trackingNumber);
        }
        
        public System.Threading.Tasks.Task<string> DeletePostActionSkipFileAsync(string caseid, string trackingNumber) {
            return base.Channel.DeletePostActionSkipFileAsync(caseid, trackingNumber);
        }
        
        public byte[] GetSkipsFile(string caseid, string trackingNumber) {
            return base.Channel.GetSkipsFile(caseid, trackingNumber);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSkipsFileAsync(string caseid, string trackingNumber) {
            return base.Channel.GetSkipsFileAsync(caseid, trackingNumber);
        }
    }
}
